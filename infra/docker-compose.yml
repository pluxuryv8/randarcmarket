version: "3.9"

services:
  # Frontend
  frontend:
    build:
      context: ../apps/frontend
      dockerfile: Dockerfile
    env_file:
      - ../apps/frontend/.env
    ports:
      - "5173:5173"
    volumes:
      - ../apps/frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend

  # Backend
  backend:
    build:
      context: ../apps/backend
      dockerfile: Dockerfile
    env_file:
      - ../apps/backend/.env
    ports:
      - "8080:8080"
    volumes:
      - ../apps/backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - redis
      - database

  # Telegram Bot
  bot:
    build:
      context: ../packages/bot
      dockerfile: Dockerfile
    env_file:
      - ../packages/bot/.env
    volumes:
      - ../packages/bot:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Database (SQLite for MVP, can be replaced with PostgreSQL)
  database:
    image: alpine:latest
    volumes:
      - database_data:/data
    command: sh -c "echo 'Database volume created' && tail -f /dev/null"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  redis_data:
  database_data:
