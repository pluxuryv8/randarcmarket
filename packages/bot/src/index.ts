import { Bot, webhookCallback } from 'grammy';
import { BotError } from 'grammy';
import axios from 'axios';
import { User, Subscription } from '@randar-market/shared';

// Environment variables
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN!;
const WEBHOOK_SECRET = process.env.TELEGRAM_WEBHOOK_SECRET!;
const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';

// Create bot instance
const bot = new Bot(BOT_TOKEN);

// Error handling
bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = err.error;
  if (e instanceof BotError) {
    console.error("Known bot error occurred:", e.message);
  } else if (e instanceof Error) {
    console.error("Unknown error occurred:", e);
  }
});

// Start command
bot.command("start", async (ctx) => {
  const welcomeMessage = `
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Randar Market!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å NFT —Ä—ã–Ω–æ–∫ TON –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≥–æ–¥–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/link - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –≤–µ–±-—Å–∞–π—Ç–æ–º
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üí° –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —Å –≤–µ–±-—Å–∞–π—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /link
  `;
  
  await ctx.reply(welcomeMessage);
});

// Link command - generate linking code
bot.command("link", async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  try {
    // Generate linking code (in real implementation, this would be stored in DB)
    const linkingCode = Math.random().toString(36).substring(2, 8).toUpperCase();
    
    const message = `
üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞

–í–∞—à –∫–æ–¥ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: **${linkingCode}**

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç: https://randar-market.com
2. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram
3. –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è

‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç
    `;
    
    await ctx.reply(message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error("Error generating linking code:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è");
  }
});

// Status command - check subscription
bot.command("status", async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  try {
    // In real implementation, this would call backend API
    const response = await axios.get(`${BACKEND_URL}/api/auth/me`, {
      headers: {
        'Authorization': `Bearer ${userId}` // Simplified for MVP
      }
    });

    if (response.data.success) {
      const user = response.data.data as User;
      const subscription = user.subscription as Subscription | null;
      
      if (subscription && subscription.status === 'active') {
        const endDate = new Date(subscription.end_date).toLocaleDateString('ru-RU');
        await ctx.reply(`
‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞

üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${subscription.price_ton} TON
        `);
      } else {
        await ctx.reply(`
‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

üí° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Radar —Ñ—É–Ω–∫—Ü–∏–π –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∞–π—Ç–µ:
https://randar-market.com/pricing
        `);
      }
    } else {
      await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link");
    }
  } catch (error) {
    console.error("Error checking subscription:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏");
  }
});

// Stop command - unsubscribe from notifications
bot.command("stop", async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    return;
  }

  try {
    // In real implementation, this would call backend API to stop notifications
    await ctx.reply(`
üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã

–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Radar.

üí° –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
    `);
  } catch (error) {
    console.error("Error stopping notifications:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
  }
});

// Function to send radar alerts
export async function sendRadarAlert(tgId: string, message: string): Promise<boolean> {
  try {
    await bot.api.sendMessage(tgId, message, { parse_mode: "Markdown" });
    return true;
  } catch (error) {
    console.error(`Error sending radar alert to ${tgId}:`, error);
    return false;
  }
}

// Webhook handler
export const webhookHandler = webhookCallback(bot, "express");

// Start bot (for development)
if (process.env.NODE_ENV === 'development') {
  bot.start();
  console.log("Bot started in development mode");
}

export default bot;
