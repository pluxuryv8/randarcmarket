generator client {
  provider = "prisma-client-js"
  output   = "../src/db/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Collection {
  id           String   @id
  address      String   @unique
  title        String
  cover        String?
  supply       Int?
  owners       Int?
  floorTon     Float?
  volume24hTon Float?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  items Item[]
}

model Item {
  id           String   @id
  address      String   @unique
  title        String
  image        String?
  animationUrl String?
  priceTon     Float?
  forSale      Boolean  @default(false)
  lastSaleTon  Float?
  collectionId String?
  updatedAt    DateTime
  createdAt    DateTime @default(now())

  Collection Collection? @relation(fields: [collectionId], references: [id])
}

model Trait {
  id     String @id
  itemId String
  name   String
  value  String

  @@index([itemId])
}

model RadarRound {
  id          String   @id @default(cuid())
  itemAddress String
  startsAt    DateTime
  endsAt      DateTime
  seedHash    String // commit (SHA256 от serverSeed)
  serverSeed  String? // reveal после закрытия
  publicSalt  String? // соль (TON block hash или timestamp)
  rand        String? // итоговый HMAC
  winnersJson String? // массив победителей {userId, weight} в JSON формате
  status      String // 'open' | 'closed' | 'revealed' | 'executed'
  createdAt   DateTime @default(now())

  entries RadarEntry[]

  @@index([itemAddress, status])
}

model RadarEntry {
  id        String   @id @default(cuid())
  roundId   String
  userId    String
  tier      String // 'free' | 'pro'
  weight    Float
  createdAt DateTime @default(now())

  round RadarRound @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([roundId, userId])
  @@index([userId, createdAt])
}
