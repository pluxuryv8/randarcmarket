import { executeOrder, deliverOrder } from '../services/radarBuyService';

export type Task = { type: 'execute' | 'deliver'; orderId: string };

const q: Task[] = [];

/**
 * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
 */
export function pushTask(t: Task) { 
  console.log(`[queue] Adding task: ${t.type} for order ${t.orderId} (queue size: ${q.length})`);
  q.push(t); 
  console.log(`[queue] Task added, new queue size: ${q.length}`);
}

/**
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
export function runWorkers() {
  console.log('üöÄ Starting radar workers...');
  setInterval(async () => {
    const t = q.shift();
    if (!t) {
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
      if (Math.random() < 0.01) {
        console.log(`[worker] Queue empty, waiting... (queue size: ${q.length})`);
      }
      return;
    }
    
    try {
      console.log(`[worker] Processing task: ${t.type} for order ${t.orderId}`);
      if (t.type === 'execute') {
        await executeOrder(t.orderId);
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è ‚Üí —Å—Ä–∞–∑—É –≤ –¥–æ—Å—Ç–∞–≤–∫—É
        pushTask({ type: 'deliver', orderId: t.orderId });
      } else {
        await deliverOrder(t.orderId);
      }
      console.log(`[worker] Task completed: ${t.type} for order ${t.orderId}`);
    } catch (e) {
      // –õ–æ–≥ + –º–æ–∂–Ω–æ —Ä–µ—Ç—Ä–∞–∏—Ç—å –ø–æ –ø—Ä–æ—Å—Ç–æ–π —Å—Ö–µ–º–µ
      console.error('[worker] task fail', e);
    }
  }, 400);
}
