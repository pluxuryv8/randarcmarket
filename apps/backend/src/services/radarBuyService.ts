import { prisma } from '../db/client';
import { pushTask } from '../workers/queue';
import { radarOrdersTotal, radarExecutionDurationMs, radarDeliveryTotal } from '../observability/metrics';

export interface PaymentLink {
  amountTon: number;
  comment: string;
  returnUrl: string;
  payload: string;
}

export interface OrderInfo {
  status: string;
  txHash?: string;
}

/**
 * –û–ø–ª–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function payReservationWithBalance(reservationId: string, userId: string): Promise<{ orderId: string }> {
  // –ù–∞–π—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
  const reservation = await prisma.radarReservation.findFirst({
    where: {
      id: reservationId,
      userId,
      status: 'pending',
      expiresAt: { gt: new Date() }
    }
  });

  if (!reservation) {
    throw new Error('Reservation not found or expired');
  }

  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞, —Å–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const result = await prisma.$transaction(async (tx) => {
    // –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å
    let balance = await tx.walletBalance.findUnique({
      where: { userId }
    });

    if (!balance) {
      balance = await tx.walletBalance.create({
        data: { userId, ton: 0 }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    if (balance.ton < reservation.priceTon) {
      throw new Error('Insufficient balance');
    }

    // –°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
    await tx.walletBalance.update({
      where: { userId },
      data: { ton: balance.ton - reservation.priceTon }
    });

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    const order = await tx.radarOrder.create({
      data: {
        reservationId: reservation.id,
        userId: reservation.userId,
        itemAddress: reservation.itemAddress,
        source: reservation.source,
        priceTon: reservation.priceTon,
        status: 'created'
      }
    });

    // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
    await tx.radarReservation.update({
      where: { id: reservation.id },
      data: { status: 'cancelled' }
    });

    return order;
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
  radarOrdersTotal.inc({ status: 'created' });

  return { orderId: result.id };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ TonConnect
 */
export async function getTonConnectPaymentLink(reservationId: string, userId: string): Promise<PaymentLink> {
  // –ù–∞–π—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
  const reservation = await prisma.radarReservation.findFirst({
    where: {
      id: reservationId,
      userId,
      status: 'pending',
      expiresAt: { gt: new Date() }
    }
  });

  if (!reservation) {
    throw new Error('Reservation not found or expired');
  }

  // –°–æ–∑–¥–∞—Ç—å payload –¥–ª—è TonConnect
  const payload = JSON.stringify({
    reservationId,
    userId,
    amountTon: reservation.priceTon,
    timestamp: Date.now()
  });

  return {
    amountTon: reservation.priceTon,
    comment: `Radar order: ${reservation.itemAddress}`,
    returnUrl: `${process.env.CLIENT_ORIGIN}/radar/payment/success`,
    payload
  };
}

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ TonConnect
 */
export async function confirmTonConnectPayment(reservationId: string, userId: string, proof: any): Promise<{ orderId: string }> {
  // –ù–∞–π—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
  const reservation = await prisma.radarReservation.findFirst({
    where: {
      id: reservationId,
      userId,
      status: 'pending',
      expiresAt: { gt: new Date() }
    }
  });

  if (!reservation) {
    throw new Error('Reservation not found or expired');
  }

  // –ù–∞ MVP –¥–æ–≤–µ—Ä—è–µ–º proof (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å)
  const result = await prisma.$transaction(async (tx) => {
    // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    const order = await tx.radarOrder.create({
      data: {
        reservationId: reservation.id,
        userId: reservation.userId,
        itemAddress: reservation.itemAddress,
        source: reservation.source,
        priceTon: reservation.priceTon,
        status: 'created'
      }
    });

    // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
    await tx.radarReservation.update({
      where: { id: reservation.id },
      data: { status: 'cancelled' }
    });

    return order;
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
  radarOrdersTotal.inc({ status: 'created' });

  return { orderId: result.id };
}

/**
 * –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export async function enqueueExecution(orderId: string): Promise<void> {
  console.log(`üìã Enqueueing order ${orderId} for execution`);
  
  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
  await prisma.radarOrder.update({
    where: { id: orderId },
    data: { status: 'queued' }
  });

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
  pushTask({ type: 'execute', orderId });
  console.log(`‚úÖ Order ${orderId} added to execution queue`);

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
  radarOrdersTotal.inc({ status: 'queued' });
}

/**
 * –ò—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–∏–º–∏—Ç–∞—Ü–∏—è –æ–Ω—á–µ–π–Ω-–ø–æ–∫—É–ø–∫–∏)
 */
export async function executeOrder(orderId: string): Promise<void> {
  const startTime = Date.now();

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
  await prisma.radarOrder.update({
    where: { id: orderId },
    data: { status: 'onchain_pending' }
  });

  radarOrdersTotal.inc({ status: 'onchain_pending' });

  // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
  const executionTime = Math.random() * 700 + 800; // 800-1500ms
  await new Promise(resolve => setTimeout(resolve, executionTime));

  // 90% —É—Å–ø–µ—Ö, 10% –Ω–µ—É–¥–∞—á–∞
  const isSuccess = Math.random() < 0.9;
  
  if (isSuccess) {
    // –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    const fakeTxHash = `0x${Math.random().toString(16).substring(2, 66)}`;
    
    await prisma.radarOrder.update({
      where: { id: orderId },
      data: { 
        status: 'onchain_ok',
        txHash: fakeTxHash
      }
    });

    radarOrdersTotal.inc({ status: 'onchain_ok' });
  } else {
    // –ù–µ—É–¥–∞—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    await prisma.radarOrder.update({
      where: { id: orderId },
      data: { status: 'onchain_fail' }
    });

    radarOrdersTotal.inc({ status: 'onchain_fail' });
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
  const duration = Date.now() - startTime;
  radarExecutionDurationMs.observe(duration);
}

/**
 * –î–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ (–∏–º–∏—Ç–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏)
 */
export async function deliverOrder(orderId: string, toAddress?: string): Promise<void> {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω
  const order = await prisma.radarOrder.findUnique({
    where: { id: orderId }
  });

  if (!order || order.status !== 'onchain_ok') {
    throw new Error('Order not ready for delivery');
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  await new Promise(resolve => setTimeout(resolve, 500));

  // –ù–∞ MVP —Å—Ä–∞–∑—É –¥–æ—Å—Ç–∞–≤–ª—è–µ–º
  await prisma.radarOrder.update({
    where: { id: orderId },
    data: { status: 'delivered' }
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏
  radarOrdersTotal.inc({ status: 'delivered' });
  radarDeliveryTotal.inc({ status: 'delivered' });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
 */
export async function getOrder(id: string, userId: string): Promise<OrderInfo> {
  const order = await prisma.radarOrder.findFirst({
    where: { id, userId },
    select: { status: true, txHash: true }
  });

  if (!order) {
    throw new Error('Order not found');
  }

  return {
    status: order.status,
    txHash: order.txHash || undefined
  };
}
