import { prisma } from '../db/client';
import { generateSeed, hashSeed, makeRand, randToFloat, verifyCommitReveal } from '../util/commitReveal';
import { getLatestBlockHash } from '../util/ton';
import { 
  radarRoundsTotal, 
  radarRoundCloseDuration, 
  radarEntriesTotal, 
  radarCommitRevealFailures,
  radarActiveRounds 
} from '../observability/metrics';

export interface RadarEntry {
  id: string;
  userId: string;
  tier: 'free' | 'pro';
  weight: number;
}

export interface RadarWinner {
  userId: string;
  weight: number;
}

export interface RadarResult {
  caught: boolean;
  itemAddress: string;
  reveal: {
    serverSeed: string;
    publicSalt: string;
    rand: string;
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
 */
export async function createOrJoinRound(
  itemAddress: string, 
  userId: string, 
  tier: 'free' | 'pro'
): Promise<{ roundId: string; roundEndsAt: Date; seedHash: string }> {
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç tier
  const weight = tier === 'pro' ? 1.25 : 1.0;
  
  // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–∞—É–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ NFT
  let round = await prisma.radarRound.findFirst({
    where: {
      itemAddress,
      status: 'open',
      endsAt: { gt: new Date() }
    }
  });

  if (!round) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    const serverSeed = generateSeed();
    const seedHash = hashSeed(serverSeed);
    const startsAt = new Date();
    const endsAt = new Date(startsAt.getTime() + 500); // 500ms —Ä–∞—É–Ω–¥

    round = await prisma.radarRound.create({
      data: {
        itemAddress,
        startsAt,
        endsAt,
        seedHash,
        serverSeed,
        status: 'open'
      }
    });

    // –ú–µ—Ç—Ä–∏–∫–∏: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
    radarRoundsTotal.inc({ status: 'open' });
    radarActiveRounds.inc();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    setTimeout(() => closeRound(round!.id), 500);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const existingEntry = await prisma.radarEntry.findUnique({
    where: {
      roundId_userId: {
        roundId: round.id,
        userId
      }
    }
  });

  if (existingEntry) {
    throw new Error('User already joined this round');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
  await prisma.radarEntry.create({
    data: {
      roundId: round.id,
      userId,
      tier,
      weight
    }
  });

  // –ú–µ—Ç—Ä–∏–∫–∏: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  radarEntriesTotal.inc({ tier });

  return {
    roundId: round.id,
    roundEndsAt: round.endsAt,
    seedHash: round.seedHash
  };
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞—É–Ω–¥ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
 */
export async function closeRound(roundId: string): Promise<void> {
  const startTime = Date.now();
  
  const round = await prisma.radarRound.findUnique({
    where: { id: roundId },
    include: { entries: true }
  });

  if (!round || round.status !== 'open') {
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º TON block hash –∫–∞–∫ public salt
  const publicSalt = await getLatestBlockHash();
  
  // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π rand
  const rand = makeRand(round.serverSeed!, publicSalt);
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  const winners = pickWeightedWinners(round.entries, rand);
  
  // –õ–æ–≥–∏—Ä—É–µ–º commit-reveal –¥–∞–Ω–Ω—ã–µ
  console.log(`üîê Radar round ${roundId} reveal:`, {
    seedHash: round.seedHash,
    publicSalt,
    rand,
    winnersCount: winners.length
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—É–Ω–¥
  await prisma.radarRound.update({
    where: { id: roundId },
    data: {
      publicSalt,
      rand,
      winnersJson: JSON.stringify(winners),
      status: 'revealed'
    }
  });

  // –ú–µ—Ç—Ä–∏–∫–∏: –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–∞—É–Ω–¥–∞
  const closeDuration = Date.now() - startTime;
  radarRoundCloseDuration.observe({ status: 'revealed' }, closeDuration);
  radarRoundsTotal.inc({ status: 'closed' });
  radarRoundsTotal.inc({ status: 'revealed' });
  radarActiveRounds.dec();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å commit-reveal
  if (!verifyCommitReveal(round.seedHash, round.serverSeed!)) {
    radarCommitRevealFailures.inc();
    console.error(`‚ùå Commit-reveal verification failed for round ${roundId}`);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getResult(roundId: string, userId: string): Promise<RadarResult> {
  const round = await prisma.radarRound.findUnique({
    where: { id: roundId },
    include: { entries: true }
  });

  if (!round) {
    throw new Error('Round not found');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const entry = round.entries.find(e => e.userId === userId);
  if (!entry) {
    throw new Error('User did not participate in this round');
  }

  // –ï—Å–ª–∏ —Ä–∞—É–Ω–¥ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
  if (round.status === 'open' && round.endsAt < new Date()) {
    await closeRound(roundId);
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const updatedRound = await prisma.radarRound.findUnique({
      where: { id: roundId }
    });
    if (updatedRound) {
      round.status = updatedRound.status;
      round.publicSalt = updatedRound.publicSalt;
      round.rand = updatedRound.rand;
      round.winnersJson = updatedRound.winnersJson;
    }
  }

  if (round.status !== 'revealed') {
    throw new Error('Round not yet revealed');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
  const winners = round.winnersJson ? JSON.parse(round.winnersJson) as RadarWinner[] : [];
  const isWinner = winners.some(w => w.userId === userId);

  return {
    caught: isWinner,
    itemAddress: round.itemAddress,
    reveal: {
      serverSeed: round.serverSeed!,
      publicSalt: round.publicSalt!,
      rand: round.rand!
    }
  };
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏
 */
function pickWeightedWinners(entries: any[], rand: string): RadarWinner[] {
  if (entries.length === 0) {
    return [];
  }

  const randomValue = randToFloat(rand);
  const totalWeight = entries.reduce((sum, entry) => sum + entry.weight, 0);
  
  let currentWeight = 0;
  for (const entry of entries) {
    currentWeight += entry.weight / totalWeight;
    if (randomValue <= currentWeight) {
      return [{ userId: entry.userId, weight: entry.weight }];
    }
  }

  // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  const lastEntry = entries[entries.length - 1];
  return [{ userId: lastEntry.userId, weight: lastEntry.weight }];
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—É–Ω–¥–∞
 */
export async function getRoundStats(roundId: string) {
  const round = await prisma.radarRound.findUnique({
    where: { id: roundId },
    include: { entries: true }
  });

  if (!round) {
    throw new Error('Round not found');
  }

  const totalEntries = round.entries.length;
  const freeEntries = round.entries.filter(e => e.tier === 'free').length;
  const proEntries = round.entries.filter(e => e.tier === 'pro').length;
  const totalWeight = round.entries.reduce((sum, e) => sum + e.weight, 0);

  return {
    roundId,
    itemAddress: round.itemAddress,
    status: round.status,
    totalEntries,
    freeEntries,
    proEntries,
    totalWeight,
    startsAt: round.startsAt,
    endsAt: round.endsAt
  };
}
